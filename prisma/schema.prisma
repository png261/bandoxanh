generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  clerkId            String              @unique
  email              String              @unique
  name               String?
  avatar             String?
  joinDate           String?
  bio                String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  level              Int                 @default(1)
  points             Int                 @default(0)
  title              String              @default("Người mới")
  isAdmin            Boolean             @default(false)
  comments           Comment[]
  eventRegistrations EventRegistration[]
  notifications      Notification[]
  likes              PostLike[]
  reactions          PostReaction[]
  posts              Post[]
  awards             UserAward[]
  badges             UserBadge[]
  followers          UserFollow[]        @relation("UserFollowers")
  following          UserFollow[]        @relation("UserFollowing")

  @@map("users")
}

model Award {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  icon        String
  createdAt   DateTime    @default(now())
  users       UserAward[]

  @@map("awards")
}

model UserAward {
  userId     Int
  awardId    Int
  assignedAt DateTime @default(now())
  award      Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, awardId])
  @@map("user_awards")
}

model Station {
  id         Int      @id @default(autoincrement())
  name       String
  address    String
  latitude   Float
  longitude  Float
  hours      String
  wasteTypes String
  image      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("stations")
}

model RecyclingEvent {
  id            Int                 @id @default(autoincrement())
  name          String
  address       String
  latitude      Float
  longitude     Float
  date          String
  time          String
  organizer     String
  description   String
  image         String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  registrations EventRegistration[]

  @@map("recycling_events")
}

model Post {
  id        Int            @id @default(autoincrement())
  content   String
  images    String?
  timestamp String
  likes     Int            @default(0)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  authorId  Int
  hashtags  String?
  comments  Comment[]
  poll      Poll?
  likedBy   PostLike[]
  reactions PostReaction[]
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model PostLike {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  timestamp String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Poll {
  id        Int          @id @default(autoincrement())
  question  String
  votedBy   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  postId    Int          @unique
  options   PollOption[]
  post      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("polls")
}

model PollOption {
  id        Int      @id @default(autoincrement())
  text      String
  votes     Int      @default(0)
  createdAt DateTime @default(now())
  pollId    Int
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@map("poll_options")
}

model NewsArticle {
  id         Int      @id @default(autoincrement())
  title      String
  category   String
  excerpt    String
  imageUrl   String
  date       String
  isFeatured Boolean  @default(false)
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("news_articles")
}

model WasteAnalysis {
  id                  Int      @id @default(autoincrement())
  imageUrl            String
  wasteType           String
  recyclingSuggestion String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("waste_analyses")
}

model Badge {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  icon        String
  color       String
  category    String
  qrCode      String?     @unique
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       UserBadge[]

  @@map("badges")
}

model UserBadge {
  userId    Int
  badgeId   Int
  earnedAt  DateTime  @default(now())
  scannedAt DateTime?
  badge     Badge     @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, badgeId])
  @@map("user_badges")
}

model EventRegistration {
  id        Int            @id @default(autoincrement())
  userId    Int
  eventId   Int
  status    String         @default("interested")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  event     RecyclingEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_registrations")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  title     String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UserFollow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("user_follows")
}

model PostReaction {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  type      String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_reactions")
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  postCount Int      @default(0)
  trending  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("hashtags")
}
