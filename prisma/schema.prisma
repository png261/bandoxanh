// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id        Int     @id @default(autoincrement())
  name      String
  avatar    String
  joinDate  String
  bio       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  awards    UserAward[]
  posts     Post[]
  comments  Comment[]

  @@map("users")
}

// Award Model
model Award {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  icon        String
  createdAt   DateTime @default(now())

  // Relations
  users UserAward[]

  @@map("awards")
}

// UserAward Junction Model
model UserAward {
  userId  Int
  awardId Int
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  award   Award @relation(fields: [awardId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([userId, awardId])
  @@map("user_awards")
}

// Station Model (Recycling Stations)
model Station {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  latitude  Float
  longitude Float
  hours     String
  wasteTypes String  // JSON array stored as string
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stations")
}

// RecyclingEvent Model
model RecyclingEvent {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  latitude    Float
  longitude   Float
  date        String
  time        String
  organizer   String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("recycling_events")
}

// Post Model
model Post {
  id        Int      @id @default(autoincrement())
  content   String
  images    String?  // JSON array stored as string
  poll      Poll?
  timestamp String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]

  @@map("posts")
}

// Comment Model
model Comment {
  id        Int     @id @default(autoincrement())
  content   String
  timestamp String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postId    Int
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Poll Model
model Poll {
  id        Int         @id @default(autoincrement())
  question  String
  options   PollOption[]
  votedBy   String?     // JSON array of user IDs
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  postId    Int         @unique
  post      Post        @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("polls")
}

// PollOption Model
model PollOption {
  id        Int     @id @default(autoincrement())
  text      String
  votes     Int     @default(0)
  createdAt DateTime @default(now())

  // Relations
  pollId    Int
  poll      Poll    @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@map("poll_options")
}

// NewsArticle Model
model NewsArticle {
  id         Int     @id @default(autoincrement())
  title      String
  category   String
  excerpt    String
  imageUrl   String
  date       String
  isFeatured Boolean @default(false)
  content    String  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("news_articles")
}

// WasteAnalysis Model (for storing AI analysis results)
model WasteAnalysis {
  id                  Int     @id @default(autoincrement())
  imageUrl            String
  wasteType           String
  recyclingSuggestion String  @db.Text
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("waste_analyses")
}

