'use client';

import { useEffect, useState } from 'react';
import { useUser } from '@clerk/nextjs';
import { useRouter } from 'next/navigation';
import { toast } from 'react-hot-toast';

interface User {
  id: number;
  clerkId: string;
  email: string;
  name: string;
  avatar: string | null;
  isAdmin: boolean;
  _count: {
    posts: number;
    comments: number;
  };
}

export default function AdminUsersPage() {
  const { user, isLoaded } = useUser();
  const router = useRouter();
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterAdmin, setFilterAdmin] = useState<'all' | 'admin' | 'user'>('all');
  const [processingUserId, setProcessingUserId] = useState<number | null>(null);
  const [confirmModal, setConfirmModal] = useState<{
    show: boolean;
    userId: number;
    userName: string;
    action: 'grant' | 'revoke';
  } | null>(null);
  const [showHelp, setShowHelp] = useState(false);

  useEffect(() => {
    if (isLoaded && !user) {
      router.push('/sign-in');
    }
  }, [isLoaded, user, router]);

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const response = await fetch('/api/admin/users');
      
      if (response.status === 403) {
        toast.error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y');
        router.push('/admin');
        return;
      }
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('Failed to fetch users:', errorText);
        throw new Error('Failed to fetch users');
      }
      
      const data = await response.json();
      setUsers(data);
    } catch (error) {
      console.error('Error fetching users:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng');
    } finally {
      setLoading(false);
    }
  };

  const toggleAdmin = async (userId: number, currentStatus: boolean) => {
    try {
      setProcessingUserId(userId);
      const response = await fetch('/api/admin/users', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ targetUserId: userId, isAdmin: !currentStatus }),
      });

      if (response.status === 403) {
        const data = await response.json();
        toast.error(data.error || 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y');
        return;
      }

      if (!response.ok) throw new Error('Failed to update user');

      const updatedUser = await response.json();
      setUsers(users.map(u => u.id === userId ? updatedUser : u));
      toast.success(
        updatedUser.isAdmin 
          ? '‚úÖ ƒê√£ c·∫•p quy·ªÅn admin th√†nh c√¥ng' 
          : '‚úÖ ƒê√£ g·ª° quy·ªÅn admin th√†nh c√¥ng'
      );
      setConfirmModal(null);
    } catch (error) {
      console.error('Error updating user:', error);
      toast.error('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t quy·ªÅn ng∆∞·ªùi d√πng');
    } finally {
      setProcessingUserId(null);
    }
  };

  const handleActionClick = (userId: number, userName: string, isAdmin: boolean) => {
    setConfirmModal({
      show: true,
      userId,
      userName,
      action: isAdmin ? 'revoke' : 'grant'
    });
  };

  const filteredUsers = users.filter(u => {
    const matchesSearch = u.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         u.email.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = filterAdmin === 'all' || 
                         (filterAdmin === 'admin' && u.isAdmin) ||
                         (filterAdmin === 'user' && !u.isAdmin);
    return matchesSearch && matchesFilter;
  });

  if (!isLoaded || loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-4xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
              üë• Qu·∫£n l√Ω Qu·∫£n Tr·ªã Vi√™n
            </h1>
            <div className="flex gap-2">
              <button
                onClick={() => setShowHelp(!showHelp)}
                className="px-4 py-2 bg-blue-500 text-white rounded-lg shadow-sm hover:bg-blue-600 transition-all flex items-center gap-2"
                title="Xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"
              >
                <span className="text-xl">‚ùì</span>
                <span>H∆∞·ªõng d·∫´n</span>
              </button>
              <button
                onClick={() => router.push('/admin')}
                className="px-4 py-2 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow text-gray-700"
              >
                ‚Üê Quay l·∫°i
              </button>
            </div>
          </div>
          <p className="text-gray-600 text-lg">
            Trang n√†y gi√∫p b·∫°n qu·∫£n l√Ω ai c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n (Admin) trong h·ªá th·ªëng
          </p>
        </div>

        {/* Help Section */}
        {showHelp && (
          <div className="bg-blue-50 border-2 border-blue-200 rounded-xl p-6 mb-6 shadow-lg">
            <div className="flex items-start gap-4">
              <span className="text-4xl">üí°</span>
              <div className="flex-1">
                <h3 className="text-xl font-bold text-blue-900 mb-3">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h3>
                <div className="space-y-3 text-gray-700">
                  <div className="flex items-start gap-3">
                    <span className="text-2xl">üîç</span>
                    <div>
                      <strong>T√¨m ki·∫øm:</strong> G√µ t√™n ho·∫∑c email ng∆∞·ªùi d√πng v√†o √¥ t√¨m ki·∫øm ƒë·ªÉ l·ªçc danh s√°ch
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <span className="text-2xl">üéØ</span>
                    <div>
                      <strong>L·ªçc ng∆∞·ªùi d√πng:</strong> Nh·∫•n v√†o c√°c n√∫t "T·∫•t c·∫£", "Admin", ho·∫∑c "User" ƒë·ªÉ xem t·ª´ng nh√≥m
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <span className="text-2xl">‚¨ÜÔ∏è</span>
                    <div>
                      <strong>C·∫•p quy·ªÅn Admin:</strong> Nh·∫•n n√∫t "‚¨ÜÔ∏è C·∫•p Admin" ƒë·ªÉ cho ph√©p ng∆∞·ªùi d√πng qu·∫£n l√Ω h·ªá th·ªëng
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <span className="text-2xl">üîΩ</span>
                    <div>
                      <strong>G·ª° quy·ªÅn Admin:</strong> Nh·∫•n n√∫t "üîΩ G·ª° Admin" ƒë·ªÉ thu h·ªìi quy·ªÅn qu·∫£n tr·ªã
                    </div>
                  </div>
                  <div className="bg-yellow-100 border border-yellow-300 rounded-lg p-3 mt-4">
                    <div className="flex items-start gap-2">
                      <span className="text-xl">‚ö†Ô∏è</span>
                      <div>
                        <strong>L∆∞u √Ω:</strong> B·∫°n kh√¥ng th·ªÉ t·ª± g·ª° quy·ªÅn admin c·ªßa ch√≠nh m√¨nh. C·∫ßn c√≥ admin kh√°c th·ª±c hi·ªán.
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <button
                onClick={() => setShowHelp(false)}
                className="text-gray-400 hover:text-gray-600 text-2xl"
              >
                ‚úï
              </button>
            </div>
          </div>
        )}

        {/* Filters and Search */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
          <div className="mb-4">
            <h3 className="text-lg font-semibold text-gray-800 mb-2">üîç T√¨m ki·∫øm v√† l·ªçc</h3>
            <p className="text-sm text-gray-600">S·ª≠ d·ª•ng c√°c c√¥ng c·ª• d∆∞·ªõi ƒë√¢y ƒë·ªÉ t√¨m ng∆∞·ªùi d√πng b·∫°n c·∫ßn</p>
          </div>
          <div className="flex flex-col md:flex-row gap-4">
            {/* Search */}
            <div className="flex-1">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                T√¨m ki·∫øm ng∆∞·ªùi d√πng
              </label>
              <input
                type="text"
                placeholder="Nh·∫≠p t√™n ho·∫∑c email..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 outline-none transition-all text-base"
              />
            </div>

            {/* Filter */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                L·ªçc theo vai tr√≤
              </label>
              <div className="flex gap-2">
                <button
                  onClick={() => setFilterAdmin('all')}
                  className={`px-5 py-3 rounded-lg font-medium transition-all text-base ${
                    filterAdmin === 'all'
                      ? 'bg-green-600 text-white shadow-lg scale-105'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                  title="Hi·ªÉn th·ªã t·∫•t c·∫£ ng∆∞·ªùi d√πng"
                >
                  üìã T·∫•t c·∫£ ({users.length})
                </button>
                <button
                  onClick={() => setFilterAdmin('admin')}
                  className={`px-5 py-3 rounded-lg font-medium transition-all text-base ${
                    filterAdmin === 'admin'
                      ? 'bg-green-600 text-white shadow-lg scale-105'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                  title="Ch·ªâ hi·ªÉn th·ªã c√°c qu·∫£n tr·ªã vi√™n"
                >
                  üëë Admin ({users.filter(u => u.isAdmin).length})
                </button>
                <button
                  onClick={() => setFilterAdmin('user')}
                  className={`px-5 py-3 rounded-lg font-medium transition-all text-base ${
                    filterAdmin === 'user'
                      ? 'bg-green-600 text-white shadow-lg scale-105'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                  title="Ch·ªâ hi·ªÉn th·ªã ng∆∞·ªùi d√πng th∆∞·ªùng"
                >
                  üë§ User ({users.filter(u => !u.isAdmin).length})
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Users Table */}
        <div className="bg-white rounded-xl shadow-lg overflow-hidden">
          <div className="bg-gradient-to-r from-green-600 to-emerald-600 text-white p-4">
            <h3 className="text-lg font-semibold">üìä Danh s√°ch ng∆∞·ªùi d√πng</h3>
            <p className="text-sm text-green-100 mt-1">
              {filteredUsers.length === 0 
                ? 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o ph√π h·ª£p'
                : `ƒêang hi·ªÉn th·ªã ${filteredUsers.length} ng∆∞·ªùi d√πng`
              }
            </p>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 border-b-2 border-gray-200">
                <tr>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">
                    <div className="flex items-center gap-2">
                      <span>üë§</span>
                      <span>Ng∆∞·ªùi d√πng</span>
                    </div>
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">
                    <div className="flex items-center gap-2">
                      <span>üìß</span>
                      <span>Email</span>
                    </div>
                  </th>
                  <th className="px-6 py-4 text-center text-sm font-semibold text-gray-700">
                    <div className="flex items-center justify-center gap-2">
                      <span>üìù</span>
                      <span>B√†i vi·∫øt</span>
                    </div>
                  </th>
                  <th className="px-6 py-4 text-center text-sm font-semibold text-gray-700">
                    <div className="flex items-center justify-center gap-2">
                      <span>üí¨</span>
                      <span>B√¨nh lu·∫≠n</span>
                    </div>
                  </th>
                  <th className="px-6 py-4 text-center text-sm font-semibold text-gray-700">
                    <div className="flex items-center justify-center gap-2">
                      <span>üè∑Ô∏è</span>
                      <span>Vai tr√≤</span>
                    </div>
                  </th>
                  <th className="px-6 py-4 text-center text-sm font-semibold text-gray-700">
                    <div className="flex items-center justify-center gap-2">
                      <span>‚ö°</span>
                      <span>Thao t√°c</span>
                    </div>
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {filteredUsers.length === 0 ? (
                  <tr>
                    <td colSpan={6} className="px-6 py-12 text-center text-gray-500">
                      Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o
                    </td>
                  </tr>
                ) : (
                  filteredUsers.map((user) => (
                    <tr
                      key={user.id}
                      className="hover:bg-gray-50 transition-colors"
                    >
                      {/* User Info */}
                      <td className="px-6 py-4">
                        <div className="flex items-center gap-3">
                          <img
                            src={user.avatar || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}&background=10b981&color=fff&size=40`}
                            alt={user.name}
                            className="w-10 h-10 rounded-full object-cover"
                          />
                          <div>
                            <div className="font-medium text-gray-900">{user.name}</div>
                          </div>
                        </div>
                      </td>

                      {/* Email */}
                      <td className="px-6 py-4 text-gray-600 text-sm">
                        {user.email}
                      </td>

                      {/* Posts Count */}
                      <td className="px-6 py-4 text-center">
                        <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                          {user._count.posts}
                        </span>
                      </td>

                      {/* Comments Count */}
                      <td className="px-6 py-4 text-center">
                        <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800">
                          {user._count.comments}
                        </span>
                      </td>

                      {/* Role Badge */}
                      <td className="px-6 py-4 text-center">
                        {user.isAdmin ? (
                          <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                            üëë Admin
                          </span>
                        ) : (
                          <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800">
                            üë§ User
                          </span>
                        )}
                      </td>

                      {/* Action */}
                      <td className="px-6 py-4 text-center">
                        <button
                          onClick={() => handleActionClick(user.id, user.name, user.isAdmin)}
                          disabled={processingUserId === user.id}
                          className={`px-5 py-2.5 rounded-lg font-medium transition-all text-base shadow-md hover:shadow-lg ${
                            user.isAdmin
                              ? 'bg-gradient-to-r from-red-500 to-red-600 text-white hover:from-red-600 hover:to-red-700'
                              : 'bg-gradient-to-r from-green-500 to-green-600 text-white hover:from-green-600 hover:to-green-700'
                          } ${processingUserId === user.id ? 'opacity-50 cursor-not-allowed' : ''}`}
                          title={user.isAdmin ? 'Nh·∫•n ƒë·ªÉ g·ª° quy·ªÅn admin' : 'Nh·∫•n ƒë·ªÉ c·∫•p quy·ªÅn admin'}
                        >
                          {processingUserId === user.id ? (
                            <span className="flex items-center gap-2">
                              <span className="animate-spin">‚è≥</span>
                              <span>ƒêang x·ª≠ l√Ω...</span>
                            </span>
                          ) : user.isAdmin ? (
                            <span>üîΩ G·ª° Admin</span>
                          ) : (
                            <span>‚¨ÜÔ∏è C·∫•p Admin</span>
                          )}
                        </button>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* Stats Footer */}
        <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-gradient-to-br from-blue-500 to-blue-600 text-white rounded-xl shadow-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-blue-100 text-sm font-medium mb-1">T·ªïng ng∆∞·ªùi d√πng</div>
                <div className="text-4xl font-bold">{users.length}</div>
              </div>
              <div className="text-5xl opacity-20">üë•</div>
            </div>
          </div>
          <div className="bg-gradient-to-br from-green-500 to-green-600 text-white rounded-xl shadow-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-green-100 text-sm font-medium mb-1">Qu·∫£n tr·ªã vi√™n</div>
                <div className="text-4xl font-bold">{users.filter(u => u.isAdmin).length}</div>
              </div>
              <div className="text-5xl opacity-20">üëë</div>
            </div>
          </div>
          <div className="bg-gradient-to-br from-purple-500 to-purple-600 text-white rounded-xl shadow-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <div className="text-purple-100 text-sm font-medium mb-1">Ng∆∞·ªùi d√πng th∆∞·ªùng</div>
                <div className="text-4xl font-bold">{users.filter(u => !u.isAdmin).length}</div>
              </div>
              <div className="text-5xl opacity-20">üë§</div>
            </div>
          </div>
        </div>

        {/* Confirmation Modal */}
        {confirmModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl shadow-2xl max-w-md w-full p-8 animate-scale-in">
              <div className="text-center mb-6">
                <div className="text-6xl mb-4">
                  {confirmModal.action === 'grant' ? '‚¨ÜÔ∏è' : 'üîΩ'}
                </div>
                <h3 className="text-2xl font-bold text-gray-900 mb-2">
                  {confirmModal.action === 'grant' ? 'C·∫•p quy·ªÅn Admin?' : 'G·ª° quy·ªÅn Admin?'}
                </h3>
                <p className="text-gray-600 text-lg">
                  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën{' '}
                  <span className="font-semibold text-gray-900">
                    {confirmModal.action === 'grant' ? 'c·∫•p quy·ªÅn admin' : 'g·ª° quy·ªÅn admin'}
                  </span>{' '}
                  cho{' '}
                  <span className="font-semibold text-green-600">
                    {confirmModal.userName}
                  </span>
                  ?
                </p>
              </div>

              <div className="bg-yellow-50 border-2 border-yellow-200 rounded-xl p-4 mb-6">
                <div className="flex gap-3">
                  <span className="text-2xl">üí°</span>
                  <div className="text-sm text-gray-700">
                    {confirmModal.action === 'grant' ? (
                      <div>
                        <strong>Quy·ªÅn Admin bao g·ªìm:</strong>
                        <ul className="mt-2 space-y-1 list-disc list-inside">
                          <li>Qu·∫£n l√Ω t·∫•t c·∫£ ng∆∞·ªùi d√πng</li>
                          <li>C·∫•p/g·ª° quy·ªÅn admin cho ng∆∞·ªùi kh√°c</li>
                          <li>Truy c·∫≠p b·∫£ng ƒëi·ªÅu khi·ªÉn admin</li>
                        </ul>
                      </div>
                    ) : (
                      <div>
                        <strong>L∆∞u √Ω:</strong> Ng∆∞·ªùi n√†y s·∫Ω m·∫•t quy·ªÅn truy c·∫≠p v√†o b·∫£ng ƒëi·ªÅu khi·ªÉn admin v√† kh√¥ng th·ªÉ qu·∫£n l√Ω ng∆∞·ªùi d√πng kh√°c.
                      </div>
                    )}
                  </div>
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={() => setConfirmModal(null)}
                  className="flex-1 px-6 py-3 bg-gray-100 text-gray-700 rounded-xl font-semibold hover:bg-gray-200 transition-all text-base"
                >
                  ‚ùå H·ªßy b·ªè
                </button>
                <button
                  onClick={() => toggleAdmin(confirmModal.userId, confirmModal.action === 'revoke')}
                  className={`flex-1 px-6 py-3 text-white rounded-xl font-semibold transition-all text-base shadow-lg hover:shadow-xl ${
                    confirmModal.action === 'grant'
                      ? 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700'
                      : 'bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700'
                  }`}
                >
                  {confirmModal.action === 'grant' ? '‚úÖ X√°c nh·∫≠n c·∫•p quy·ªÅn' : '‚úÖ X√°c nh·∫≠n g·ª° quy·ªÅn'}
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      <style jsx>{`
        @keyframes scale-in {
          from {
            opacity: 0;
            transform: scale(0.9);
          }
          to {
            opacity: 1;
            transform: scale(1);
          }
        }
        .animate-scale-in {
          animation: scale-in 0.2s ease-out;
        }
      `}</style>
    </div>
  );
}
